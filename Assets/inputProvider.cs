//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/inputProvider.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputProvider : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputProvider()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""inputProvider"",
    ""maps"": [
        {
            ""name"": ""CM FreeLook1 Camera Controls"",
            ""id"": ""9cb414fb-d900-491b-9f7a-25b7f22cd4c0"",
            ""actions"": [
                {
                    ""name"": ""MouseLook"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ec1879e0-9a09-4d1c-a134-780de3b9e65c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""cfd3cfe5-c748-4dc2-b7cc-2addb04d81ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse Zoom"",
                    ""type"": ""PassThrough"",
                    ""id"": ""bea21fbc-87da-400a-80ba-ef866a9f5501"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0aa2352a-bd78-46c1-a7ad-dced20e270be"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4943ac1a-e26f-4697-ab8a-c26964a8e22f"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e7fce38b-ece5-4268-988e-442f395c6939"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player Controls"",
            ""id"": ""ac896747-400b-4745-8d17-728e202c73cc"",
            ""actions"": [
                {
                    ""name"": ""Movement Z Axis"",
                    ""type"": ""Button"",
                    ""id"": ""058d9d8c-6c0e-44c4-b0d7-939f6dca770e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotation Y Axis"",
                    ""type"": ""Button"",
                    ""id"": ""562c2c7a-ebdf-408d-974f-2af70d63c096"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement X Axis"",
                    ""type"": ""Button"",
                    ""id"": ""83a18bb5-c9e8-4abf-a6d6-1274dfa1a3f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""f4493c46-36ee-45be-b0c3-cd777a2ed82d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement Z Axis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""cf899409-fa31-4143-ac7a-fcf6406beace"",
                    ""path"": ""<Keyboard>/#(S)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement Z Axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""386b8122-05e3-4e91-be9a-fe6728579d7f"",
                    ""path"": ""<Keyboard>/#(W)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement Z Axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""30bd7f33-c27e-4d65-9ade-a2cb4b10d8a2"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation Y Axis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""8192ec6f-5ae4-43ef-8e74-33a96c1d3bbe"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation Y Axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7e6a33d5-4667-4ba6-8c75-5e82e7886962"",
                    ""path"": ""<Keyboard>/rightShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation Y Axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4d93f186-4901-4a56-8dab-cb5dea13b4f7"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement X Axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""497f475b-5486-444b-9f1f-91a5c8bf3e90"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement X Axis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""602efd89-1037-4099-a8ed-cf8977ce7380"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement X Axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f8066a61-816e-46a4-b5a4-90427aeb8a9b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement X Axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Gameplay Movement"",
            ""id"": ""87e7712f-f47c-4051-ac16-689fd44f25fa"",
            ""actions"": [
                {
                    ""name"": ""Acceleration"",
                    ""type"": ""Button"",
                    ""id"": ""3dcd2951-8924-455d-8dbb-36d81af852e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SteeringAngle"",
                    ""type"": ""Value"",
                    ""id"": ""f9fbdbd3-5db5-4cd6-9dfa-ad68b8377c6b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HandBrake"",
                    ""type"": ""Button"",
                    ""id"": ""f4d2325d-52d6-42f9-bd03-0380fefb5916"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6606b511-bfa0-4e29-9a8d-54844d808d4a"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""67b4fa09-56aa-4f28-87fc-2d7417852534"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""53876e76-6bd6-4d5a-8851-2374a82582fd"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e508006b-74a9-41ee-81cb-d470f58d42e6"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9a712f0a-1090-48a1-a4ad-4d902e111edf"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SteeringAngle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""a0edfb64-3155-41c4-be51-b34aefdda433"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SteeringAngle"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""bd4e5817-2484-4c50-befd-bfa71d3112d3"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SteeringAngle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8a3d8a1f-0fae-46f3-b26c-a54825b1ac80"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SteeringAngle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""52d4900c-accd-4e35-8cd6-c9b746faf273"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandBrake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dab20608-8218-48d9-b2d0-a868bcd6ac0b"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandBrake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""inputProvider"",
            ""bindingGroup"": ""inputProvider"",
            ""devices"": []
        }
    ]
}");
        // CM FreeLook1 Camera Controls
        m_CMFreeLook1CameraControls = asset.FindActionMap("CM FreeLook1 Camera Controls", throwIfNotFound: true);
        m_CMFreeLook1CameraControls_MouseLook = m_CMFreeLook1CameraControls.FindAction("MouseLook", throwIfNotFound: true);
        m_CMFreeLook1CameraControls_Jump = m_CMFreeLook1CameraControls.FindAction("Jump", throwIfNotFound: true);
        m_CMFreeLook1CameraControls_MouseZoom = m_CMFreeLook1CameraControls.FindAction("Mouse Zoom", throwIfNotFound: true);
        // Player Controls
        m_PlayerControls = asset.FindActionMap("Player Controls", throwIfNotFound: true);
        m_PlayerControls_MovementZAxis = m_PlayerControls.FindAction("Movement Z Axis", throwIfNotFound: true);
        m_PlayerControls_RotationYAxis = m_PlayerControls.FindAction("Rotation Y Axis", throwIfNotFound: true);
        m_PlayerControls_MovementXAxis = m_PlayerControls.FindAction("Movement X Axis", throwIfNotFound: true);
        // Gameplay Movement
        m_GameplayMovement = asset.FindActionMap("Gameplay Movement", throwIfNotFound: true);
        m_GameplayMovement_Acceleration = m_GameplayMovement.FindAction("Acceleration", throwIfNotFound: true);
        m_GameplayMovement_SteeringAngle = m_GameplayMovement.FindAction("SteeringAngle", throwIfNotFound: true);
        m_GameplayMovement_HandBrake = m_GameplayMovement.FindAction("HandBrake", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CM FreeLook1 Camera Controls
    private readonly InputActionMap m_CMFreeLook1CameraControls;
    private ICMFreeLook1CameraControlsActions m_CMFreeLook1CameraControlsActionsCallbackInterface;
    private readonly InputAction m_CMFreeLook1CameraControls_MouseLook;
    private readonly InputAction m_CMFreeLook1CameraControls_Jump;
    private readonly InputAction m_CMFreeLook1CameraControls_MouseZoom;
    public struct CMFreeLook1CameraControlsActions
    {
        private @InputProvider m_Wrapper;
        public CMFreeLook1CameraControlsActions(@InputProvider wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseLook => m_Wrapper.m_CMFreeLook1CameraControls_MouseLook;
        public InputAction @Jump => m_Wrapper.m_CMFreeLook1CameraControls_Jump;
        public InputAction @MouseZoom => m_Wrapper.m_CMFreeLook1CameraControls_MouseZoom;
        public InputActionMap Get() { return m_Wrapper.m_CMFreeLook1CameraControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CMFreeLook1CameraControlsActions set) { return set.Get(); }
        public void SetCallbacks(ICMFreeLook1CameraControlsActions instance)
        {
            if (m_Wrapper.m_CMFreeLook1CameraControlsActionsCallbackInterface != null)
            {
                @MouseLook.started -= m_Wrapper.m_CMFreeLook1CameraControlsActionsCallbackInterface.OnMouseLook;
                @MouseLook.performed -= m_Wrapper.m_CMFreeLook1CameraControlsActionsCallbackInterface.OnMouseLook;
                @MouseLook.canceled -= m_Wrapper.m_CMFreeLook1CameraControlsActionsCallbackInterface.OnMouseLook;
                @Jump.started -= m_Wrapper.m_CMFreeLook1CameraControlsActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_CMFreeLook1CameraControlsActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_CMFreeLook1CameraControlsActionsCallbackInterface.OnJump;
                @MouseZoom.started -= m_Wrapper.m_CMFreeLook1CameraControlsActionsCallbackInterface.OnMouseZoom;
                @MouseZoom.performed -= m_Wrapper.m_CMFreeLook1CameraControlsActionsCallbackInterface.OnMouseZoom;
                @MouseZoom.canceled -= m_Wrapper.m_CMFreeLook1CameraControlsActionsCallbackInterface.OnMouseZoom;
            }
            m_Wrapper.m_CMFreeLook1CameraControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseLook.started += instance.OnMouseLook;
                @MouseLook.performed += instance.OnMouseLook;
                @MouseLook.canceled += instance.OnMouseLook;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @MouseZoom.started += instance.OnMouseZoom;
                @MouseZoom.performed += instance.OnMouseZoom;
                @MouseZoom.canceled += instance.OnMouseZoom;
            }
        }
    }
    public CMFreeLook1CameraControlsActions @CMFreeLook1CameraControls => new CMFreeLook1CameraControlsActions(this);

    // Player Controls
    private readonly InputActionMap m_PlayerControls;
    private IPlayerControlsActions m_PlayerControlsActionsCallbackInterface;
    private readonly InputAction m_PlayerControls_MovementZAxis;
    private readonly InputAction m_PlayerControls_RotationYAxis;
    private readonly InputAction m_PlayerControls_MovementXAxis;
    public struct PlayerControlsActions
    {
        private @InputProvider m_Wrapper;
        public PlayerControlsActions(@InputProvider wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovementZAxis => m_Wrapper.m_PlayerControls_MovementZAxis;
        public InputAction @RotationYAxis => m_Wrapper.m_PlayerControls_RotationYAxis;
        public InputAction @MovementXAxis => m_Wrapper.m_PlayerControls_MovementXAxis;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControlsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerControlsActions instance)
        {
            if (m_Wrapper.m_PlayerControlsActionsCallbackInterface != null)
            {
                @MovementZAxis.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnMovementZAxis;
                @MovementZAxis.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnMovementZAxis;
                @MovementZAxis.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnMovementZAxis;
                @RotationYAxis.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnRotationYAxis;
                @RotationYAxis.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnRotationYAxis;
                @RotationYAxis.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnRotationYAxis;
                @MovementXAxis.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnMovementXAxis;
                @MovementXAxis.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnMovementXAxis;
                @MovementXAxis.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnMovementXAxis;
            }
            m_Wrapper.m_PlayerControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MovementZAxis.started += instance.OnMovementZAxis;
                @MovementZAxis.performed += instance.OnMovementZAxis;
                @MovementZAxis.canceled += instance.OnMovementZAxis;
                @RotationYAxis.started += instance.OnRotationYAxis;
                @RotationYAxis.performed += instance.OnRotationYAxis;
                @RotationYAxis.canceled += instance.OnRotationYAxis;
                @MovementXAxis.started += instance.OnMovementXAxis;
                @MovementXAxis.performed += instance.OnMovementXAxis;
                @MovementXAxis.canceled += instance.OnMovementXAxis;
            }
        }
    }
    public PlayerControlsActions @PlayerControls => new PlayerControlsActions(this);

    // Gameplay Movement
    private readonly InputActionMap m_GameplayMovement;
    private IGameplayMovementActions m_GameplayMovementActionsCallbackInterface;
    private readonly InputAction m_GameplayMovement_Acceleration;
    private readonly InputAction m_GameplayMovement_SteeringAngle;
    private readonly InputAction m_GameplayMovement_HandBrake;
    public struct GameplayMovementActions
    {
        private @InputProvider m_Wrapper;
        public GameplayMovementActions(@InputProvider wrapper) { m_Wrapper = wrapper; }
        public InputAction @Acceleration => m_Wrapper.m_GameplayMovement_Acceleration;
        public InputAction @SteeringAngle => m_Wrapper.m_GameplayMovement_SteeringAngle;
        public InputAction @HandBrake => m_Wrapper.m_GameplayMovement_HandBrake;
        public InputActionMap Get() { return m_Wrapper.m_GameplayMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayMovementActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayMovementActions instance)
        {
            if (m_Wrapper.m_GameplayMovementActionsCallbackInterface != null)
            {
                @Acceleration.started -= m_Wrapper.m_GameplayMovementActionsCallbackInterface.OnAcceleration;
                @Acceleration.performed -= m_Wrapper.m_GameplayMovementActionsCallbackInterface.OnAcceleration;
                @Acceleration.canceled -= m_Wrapper.m_GameplayMovementActionsCallbackInterface.OnAcceleration;
                @SteeringAngle.started -= m_Wrapper.m_GameplayMovementActionsCallbackInterface.OnSteeringAngle;
                @SteeringAngle.performed -= m_Wrapper.m_GameplayMovementActionsCallbackInterface.OnSteeringAngle;
                @SteeringAngle.canceled -= m_Wrapper.m_GameplayMovementActionsCallbackInterface.OnSteeringAngle;
                @HandBrake.started -= m_Wrapper.m_GameplayMovementActionsCallbackInterface.OnHandBrake;
                @HandBrake.performed -= m_Wrapper.m_GameplayMovementActionsCallbackInterface.OnHandBrake;
                @HandBrake.canceled -= m_Wrapper.m_GameplayMovementActionsCallbackInterface.OnHandBrake;
            }
            m_Wrapper.m_GameplayMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Acceleration.started += instance.OnAcceleration;
                @Acceleration.performed += instance.OnAcceleration;
                @Acceleration.canceled += instance.OnAcceleration;
                @SteeringAngle.started += instance.OnSteeringAngle;
                @SteeringAngle.performed += instance.OnSteeringAngle;
                @SteeringAngle.canceled += instance.OnSteeringAngle;
                @HandBrake.started += instance.OnHandBrake;
                @HandBrake.performed += instance.OnHandBrake;
                @HandBrake.canceled += instance.OnHandBrake;
            }
        }
    }
    public GameplayMovementActions @GameplayMovement => new GameplayMovementActions(this);
    private int m_inputProviderSchemeIndex = -1;
    public InputControlScheme inputProviderScheme
    {
        get
        {
            if (m_inputProviderSchemeIndex == -1) m_inputProviderSchemeIndex = asset.FindControlSchemeIndex("inputProvider");
            return asset.controlSchemes[m_inputProviderSchemeIndex];
        }
    }
    public interface ICMFreeLook1CameraControlsActions
    {
        void OnMouseLook(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnMouseZoom(InputAction.CallbackContext context);
    }
    public interface IPlayerControlsActions
    {
        void OnMovementZAxis(InputAction.CallbackContext context);
        void OnRotationYAxis(InputAction.CallbackContext context);
        void OnMovementXAxis(InputAction.CallbackContext context);
    }
    public interface IGameplayMovementActions
    {
        void OnAcceleration(InputAction.CallbackContext context);
        void OnSteeringAngle(InputAction.CallbackContext context);
        void OnHandBrake(InputAction.CallbackContext context);
    }
}
